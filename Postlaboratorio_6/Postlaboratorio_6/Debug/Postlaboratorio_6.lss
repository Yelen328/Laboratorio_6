
Postlaboratorio_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080018a  0080018a  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000422  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001de  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e8       	ldi	r26, 0x8A	; 138
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 39       	cpi	r26, 0x92	; 146
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  9e:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
	writeString("2. Enviar Ascii\n\r");
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 69       	ori	r24, 0x98	; 152
  be:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  c0:	e2 ec       	ldi	r30, 0xC2	; 194
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
  ca:	87 e6       	ldi	r24, 0x67	; 103
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d6:	08 95       	ret

000000d8 <INIT_ADC>:
}

void INIT_ADC(){
	ADMUX = 0;	//Apagar todo
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	
	//Voltaje de referencia 5V
	ADMUX |=(1<<REFS0);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); //orientación (izquierda)
  e4:	80 81       	ld	r24, Z
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2) | (1<<MUX1);//Selección de canal Bit 6 del puerto C
  ea:	80 81       	ld	r24, Z
  ec:	86 60       	ori	r24, 0x06	; 6
  ee:	80 83       	st	Z, r24
	
	ADCSRA = 0;	//Apagar todo
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
	ADCSRA |=(1<<ADPS1)	| (1 << ADPS0); //Configuración del presacaler 8
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//Habilitación de interrupciones
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <setup>:
	 }
		


void setup(){
	cli();
 10a:	f8 94       	cli
	initUART();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	INIT_ADC();
 110:	0e 94 6c 00 	call	0xd8	; 0xd8 <INIT_ADC>
	DDRB =0xFF;		//Configur el puerto B como saldia
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	84 b9       	out	0x04, r24	; 4
	PORTB =0x00;	//Inicialmente apagado
 118:	15 b8       	out	0x05, r1	; 5
	DDRD |= ((1<<PORTD6)|(1<<PORTD5));	// Configurar el bit 5 y 6 como salida
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	80 66       	ori	r24, 0x60	; 96
 11e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD6)|(1<<PORTD5));	//inicialmente apagado
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	8f 79       	andi	r24, 0x9F	; 159
 124:	8b b9       	out	0x0b, r24	; 11
	sei();
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <WriteChar>:
	ADCSRA |= (1 << ADEN);	//Habilitar ADS
}


void WriteChar(char caracter){
	while ( (UCSR0A & (1<<UDRE0))==0){
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <WriteChar>
		
	}

	UDR0=caracter;
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 136:	08 95       	ret

00000138 <writeString>:
	
}

//puntero
void writeString(char* texto)
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <writeString+0x12>
	{
		WriteChar(*(texto+i));
 144:	0e 94 95 00 	call	0x12a	; 0x12a <WriteChar>
}

//puntero
void writeString(char* texto)
{
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 148:	cf 5f       	subi	r28, 0xFF	; 255
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	f1 1d       	adc	r31, r1
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	f7 cf       	rjmp	.-18     	; 0x144 <writeString+0xc>
	{
		WriteChar(*(texto+i));
	}
	
}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <printMenu>:
	PORTD &= ~((1<<PORTD6)|(1<<PORTD5));	//inicialmente apagado
	sei();
}

void printMenu() {
	writeString("\n\rSeleccione una opcion:\n\r");
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
	writeString("1. Leer potenciometro\n\r");
 166:	8b e1       	ldi	r24, 0x1B	; 27
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
	writeString("2. Enviar Ascii\n\r");
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
 176:	08 95       	ret

00000178 <main>:
char valorStr[4];  // Para almacenar el valor convertido a string


int main(void)
{
    setup();
 178:	0e 94 85 00 	call	0x10a	; 0x10a <setup>
	//Iniciar la primera conversión
	ADCSRA |= (1 << ADSC);
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 64       	ori	r24, 0x40	; 64
 184:	80 83       	st	Z, r24
	
	
    while (1) 
    {
		if (menu_option==0){
 186:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <menu_option>
 18a:	81 11       	cpse	r24, r1
 18c:	05 c0       	rjmp	.+10     	; 0x198 <main+0x20>
			printMenu();
 18e:	0e 94 af 00 	call	0x15e	; 0x15e <printMenu>
			menu_option=255;	//esperar nueva opción
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <menu_option>
		}
		if (caracter=='1'){
 198:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 19c:	81 33       	cpi	r24, 0x31	; 49
 19e:	c9 f4       	brne	.+50     	; 0x1d2 <main+0x5a>
			
			itoa(valor_ADC, valorStr, 10);  // Convertir el valor de ADC a string
 1a0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <valor_ADC>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	6d e8       	ldi	r22, 0x8D	; 141
 1a8:	71 e0       	ldi	r23, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
			writeString("Valor Potenciometro: ");
 1b0:	85 e4       	ldi	r24, 0x45	; 69
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			writeString(valorStr);  // Enviar el valor como cadena
 1b8:	8d e8       	ldi	r24, 0x8D	; 141
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			writeString("\n\r");  // Añadir un salto de línea para claridad
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			caracter = 0; // Resetear la opción
 1c8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <caracter>
			menu_option = 0; // Mostrar menú nuevamente
 1cc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <menu_option>
 1d0:	da cf       	rjmp	.-76     	; 0x186 <main+0xe>
		}
		
		else if (caracter == '2') {
 1d2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 1d6:	82 33       	cpi	r24, 0x32	; 50
 1d8:	b1 f6       	brne	.-84     	; 0x186 <main+0xe>
			writeString("ingrese el carácter");
 1da:	8b e5       	ldi	r24, 0x5B	; 91
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			waiting_for_led_char=1; //Activar bandera de espera
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
			caracter=0;
 1e8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <caracter>
			while(waiting_for_led_char){}
 1ec:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 1f0:	81 11       	cpse	r24, r1
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <main+0x74>
			menu_option=0;
 1f4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <menu_option>
 1f8:	c6 cf       	rjmp	.-116    	; 0x186 <main+0xe>

000001fa <__vector_18>:
	
}

//**************VECTORES DE INTERRUPCIÓN*******************/
//Vector de interrupción USART
ISR(USART_RX_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	caracter=UDR0;
 21c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 220:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <caracter>
	
	if (waiting_for_led_char){
 224:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
 228:	88 23       	and	r24, r24
 22a:	91 f0       	breq	.+36     	; 0x250 <__vector_18+0x56>
		PORTB= caracter;
 22c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 230:	85 b9       	out	0x05, r24	; 5
		writeString("\n\rLEDs actualizados con: ");
 232:	8f e6       	ldi	r24, 0x6F	; 111
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
		writeString(valorStr);
 23a:	8d e8       	ldi	r24, 0x8D	; 141
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
		writeString("\n\r");
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
		waiting_for_led_char = 0;  // Desactivar bandera
 24a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
 24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_18+0x66>
	}
	
	else{
	WriteChar(caracter);
 250:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 254:	0e 94 95 00 	call	0x12a	; 0x12a <WriteChar>
	writeString("\n\r");  // Añadir un salto de línea 
 258:	88 e1       	ldi	r24, 0x18	; 24
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
	}
	
	if (caracter & (1 << 6))
 260:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 264:	86 ff       	sbrs	r24, 6
 266:	04 c0       	rjmp	.+8      	; 0x270 <__vector_18+0x76>
	{
		PORTD |= (1 << PORTD6);
 268:	8b b1       	in	r24, 0x0b	; 11
 26a:	80 64       	ori	r24, 0x40	; 64
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	03 c0       	rjmp	.+6      	; 0x276 <__vector_18+0x7c>
		}else{
		PORTD &= ~(1 << PORTD6);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 7b       	andi	r24, 0xBF	; 191
 274:	8b b9       	out	0x0b, r24	; 11
	}
	if (caracter & (1 << 7))
 276:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <caracter>
 27a:	88 23       	and	r24, r24
 27c:	24 f4       	brge	.+8      	; 0x286 <__vector_18+0x8c>
	{
		PORTD |= (1 << PORTD7);
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8b b9       	out	0x0b, r24	; 11
 284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_18+0x92>
		}else{
		PORTD &= ~(1 << PORTD7);
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	8b b9       	out	0x0b, r24	; 11
	}
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_21>:

//Vector de interrupción ADC
ISR(ADC_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	valor_ADC=ADCH;
 2be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <valor_ADC>
	// Iniciar nueva conversión
	ADCSRA |= (1 << ADSC);
 2c6:	ea e7       	ldi	r30, 0x7A	; 122
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	80 83       	st	Z, r24
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__itoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	4a 30       	cpi	r20, 0x0A	; 10
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <__itoa_ncheck+0x12>
 2e6:	99 23       	and	r25, r25
 2e8:	22 f4       	brpl	.+8      	; 0x2f2 <__itoa_ncheck+0x12>
 2ea:	bd e2       	ldi	r27, 0x2D	; 45
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__utoa_common>

000002f6 <__utoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27

000002f8 <__utoa_common>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	55 27       	eor	r21, r21
 2fc:	aa 27       	eor	r26, r26
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	a4 17       	cp	r26, r20
 306:	10 f0       	brcs	.+4      	; 0x30c <__utoa_common+0x14>
 308:	a4 1b       	sub	r26, r20
 30a:	83 95       	inc	r24
 30c:	50 51       	subi	r21, 0x10	; 16
 30e:	b9 f7       	brne	.-18     	; 0x2fe <__utoa_common+0x6>
 310:	a0 5d       	subi	r26, 0xD0	; 208
 312:	aa 33       	cpi	r26, 0x3A	; 58
 314:	08 f0       	brcs	.+2      	; 0x318 <__utoa_common+0x20>
 316:	a9 5d       	subi	r26, 0xD9	; 217
 318:	a1 93       	st	Z+, r26
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	79 f7       	brne	.-34     	; 0x2fc <__utoa_common+0x4>
 31e:	b1 11       	cpse	r27, r1
 320:	b1 93       	st	Z+, r27
 322:	11 92       	st	Z+, r1
 324:	cb 01       	movw	r24, r22
 326:	0c 94 95 01 	jmp	0x32a	; 0x32a <strrev>

0000032a <strrev>:
 32a:	dc 01       	movw	r26, r24
 32c:	fc 01       	movw	r30, r24
 32e:	67 2f       	mov	r22, r23
 330:	71 91       	ld	r23, Z+
 332:	77 23       	and	r23, r23
 334:	e1 f7       	brne	.-8      	; 0x32e <strrev+0x4>
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <strrev+0x18>
 33a:	7c 91       	ld	r23, X
 33c:	6d 93       	st	X+, r22
 33e:	70 83       	st	Z, r23
 340:	62 91       	ld	r22, -Z
 342:	ae 17       	cp	r26, r30
 344:	bf 07       	cpc	r27, r31
 346:	c8 f3       	brcs	.-14     	; 0x33a <strrev+0x10>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
