
Prelaboratorio_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000eb  00000000  00000000  000017a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUART>:
	sei();
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
  8c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
  90:	e1 ec       	ldi	r30, 0xC1	; 193
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 69       	ori	r24, 0x98	; 152
  98:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  9a:	e2 ec       	ldi	r30, 0xC2	; 194
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	08 95       	ret

000000b2 <setup>:
    {
    }
}

void setup(){
	cli();
  b2:	f8 94       	cli
	initUART();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <initUART>
	DDRB =0xFF;		//Configur el puerto B como saldia
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	PORTB =0x00;	//Inicialmente apagado
  bc:	15 b8       	out	0x05, r1	; 5
	DDRD |= ((1<<PORTD6)|(1<<PORTD5));	// Configurar el bit 5 y 6 como salida
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	80 66       	ori	r24, 0x60	; 96
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD6)|(1<<PORTD5));	//inicialmente apagado
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8f 79       	andi	r24, 0x9F	; 159
  c8:	8b b9       	out	0x0b, r24	; 11
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <WriteChar>:
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
}

void WriteChar(char caracter){
	while ( (UCSR0A & (1<<UDRE0))==0){
  ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d2:	95 ff       	sbrs	r25, 5
  d4:	fc cf       	rjmp	.-8      	; 0xce <WriteChar>
		
	}

	UDR0=caracter;
  d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  da:	08 95       	ret

000000dc <main>:
void initUART();
void WriteChar(char caracter);

int main(void)
{
    setup();
  dc:	0e 94 59 00 	call	0xb2	; 0xb2 <setup>
	WriteChar('H');
  e0:	88 e4       	ldi	r24, 0x48	; 72
  e2:	0e 94 67 00 	call	0xce	; 0xce <WriteChar>
	WriteChar('O');
  e6:	8f e4       	ldi	r24, 0x4F	; 79
  e8:	0e 94 67 00 	call	0xce	; 0xce <WriteChar>
	WriteChar('L');
  ec:	8c e4       	ldi	r24, 0x4C	; 76
  ee:	0e 94 67 00 	call	0xce	; 0xce <WriteChar>
	WriteChar('A');
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 67 00 	call	0xce	; 0xce <WriteChar>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x1c>

000000fa <__vector_18>:

	UDR0=caracter;
	
}

ISR(USART_RX_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	cf 93       	push	r28
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	char caracter=UDR0;
 11e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	WriteChar(caracter);
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 67 00 	call	0xce	; 0xce <WriteChar>
	PORTB=caracter;
 128:	c5 b9       	out	0x05, r28	; 5
	
	if (caracter & (1 << 6))
 12a:	c6 ff       	sbrs	r28, 6
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__vector_18+0x3c>
	{
		PORTD |= (1 << PORTD6);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 64       	ori	r24, 0x40	; 64
 132:	8b b9       	out	0x0b, r24	; 11
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_18+0x42>
		}else{
		PORTD &= ~(1 << PORTD6);
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	8b b9       	out	0x0b, r24	; 11
	}
	if (caracter & (1 << 7))
 13c:	cc 23       	and	r28, r28
 13e:	24 f4       	brge	.+8      	; 0x148 <__vector_18+0x4e>
	{
		PORTD |= (1 << PORTD7);
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8b b9       	out	0x0b, r24	; 11
 146:	03 c0       	rjmp	.+6      	; 0x14e <__vector_18+0x54>
		}else{
		PORTD &= ~(1 << PORTD7);
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	8b b9       	out	0x0b, r24	; 11
	}
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	cf 91       	pop	r28
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
