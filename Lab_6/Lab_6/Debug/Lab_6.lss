
Lab_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000079a  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e4  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017c  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUART>:
	sei();
}

void initUART(){
	//Configurar pines PD0 (TX) y PD1 (TX)
	DDRD |= (1<<DDD1);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar UCSR0A
	UCSR0A=0;
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configuración UCSR0B: Habililitndo la interrupción al escribir:
	//-Habilibitar recepción
	//-Habilitación de transmisión
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)| (1<< TXEN0);
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 69       	ori	r24, 0x98	; 152
  ae:	80 83       	st	Z, r24
	//Configurar UCSR0C
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c6:	08 95       	ret

000000c8 <setup>:
    {
    }
}

void setup(){
	cli();
  c8:	f8 94       	cli
	initUART();
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <initUART>
	//WriteString('Hola');
	DDRB =0xFF;		//Configur el puerto B como saldia
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 b9       	out	0x04, r24	; 4
	PORTB =0x00;	//Inicialmente apagado
  d2:	15 b8       	out	0x05, r1	; 5
	DDRD |= ((1<<PORTD6)|(1<<PORTD5));	// Configurar el bit 5 y 6 como salida
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	80 66       	ori	r24, 0x60	; 96
  d8:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1<<PORTD6)|(1<<PORTD5));	//inicialmente apagado
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 79       	andi	r24, 0x9F	; 159
  de:	8b b9       	out	0x0b, r24	; 11
	sei();
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <WriteChar>:
	//Configurar UBRR0: UBRR0 = 103 -> 9600  @ 16MHz
	UBRR0 = 103;
}

void WriteChar(char caracter){
	while ( (UCSR0A & (1<<UDRE0))==0){
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <WriteChar>
		
	}

	UDR0=caracter;
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <writeString>:
	
}

void writeString(char* texto)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <writeString+0x12>
	{
		WriteChar(*(texto+i));
  fe:	0e 94 72 00 	call	0xe4	; 0xe4 <WriteChar>
	
}

void writeString(char* texto)
{
	for(uint8_t i = 0; *(texto+i) !='\0'; i++)
 102:	cf 5f       	subi	r28, 0xFF	; 255
 104:	f8 01       	movw	r30, r16
 106:	ec 0f       	add	r30, r28
 108:	f1 1d       	adc	r31, r1
 10a:	80 81       	ld	r24, Z
 10c:	81 11       	cpse	r24, r1
 10e:	f7 cf       	rjmp	.-18     	; 0xfe <writeString+0xc>
	{
		WriteChar(*(texto+i));
	}
	
}
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <main>:
void WriteChar(char caracter);
void writeString (char* texto);

int main(void)
{
    setup();
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <setup>
	writeString("hola");
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 79 00 	call	0xf2	; 0xf2 <writeString>
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0xc>

00000126 <__vector_18>:
	{
		WriteChar(*(texto+i));
	}
	
}
ISR(USART_RX_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	cf 93       	push	r28
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	char caracter=UDR0;
 14a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	WriteChar(caracter);
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 72 00 	call	0xe4	; 0xe4 <WriteChar>
	PORTB=caracter;
 154:	c5 b9       	out	0x05, r28	; 5
	
	if (caracter & (1 << 6))
 156:	c6 ff       	sbrs	r28, 6
 158:	04 c0       	rjmp	.+8      	; 0x162 <__vector_18+0x3c>
	{
		PORTD |= (1 << PORTD6);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	03 c0       	rjmp	.+6      	; 0x168 <__vector_18+0x42>
		}else{
		PORTD &= ~(1 << PORTD6);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	8b b9       	out	0x0b, r24	; 11
	}
	if (caracter & (1 << 7))
 168:	cc 23       	and	r28, r28
 16a:	24 f4       	brge	.+8      	; 0x174 <__vector_18+0x4e>
	{
		PORTD |= (1 << PORTD7);
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8b b9       	out	0x0b, r24	; 11
 172:	03 c0       	rjmp	.+6      	; 0x17a <__vector_18+0x54>
		}else{
		PORTD &= ~(1 << PORTD7);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	8b b9       	out	0x0b, r24	; 11
	}
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	cf 91       	pop	r28
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
